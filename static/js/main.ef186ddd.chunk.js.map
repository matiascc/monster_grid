{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","monsters","cardsArray","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","monster","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAceA,MAZf,YAAoC,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACtB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,eAAeC,IAAG,+BAA0BL,EAA1B,uBAC3B,6BACI,4BAAKC,GACL,2BAAIC,MCULI,MAff,YAAiC,IAAbC,EAAY,EAAZA,SACZC,EAAaD,EAASE,KAAI,SAACC,EAAMC,GACrC,OACE,kBAAC,EAAD,CACEC,IAAKL,EAASI,GAAGX,GACjBA,GAAIO,EAASI,GAAGX,GAChBC,KAAMM,EAASI,GAAGV,KAClBC,MAAOK,EAASI,GAAGT,WAKzB,OAAO,6BAAMM,ICAAK,MAbf,YAAkD,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC9B,OACI,yBAAKZ,UAAU,OACX,2BACIA,UAAW,mCACXa,KAAK,SACLC,YAAY,iBACZC,SAAUH,M,MCCXI,MARf,SAAgBC,GACZ,OACI,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WC6CJC,E,kDA3CX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACT1B,SAAU,GACVuB,YAAa,IAJP,E,gEAQO,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEtB,SAAU+B,S,+BAOvC,IAAD,EAC6BC,KAAKN,MAA/B1B,EADH,EACGA,SAAUuB,EADb,EACaA,YACZU,EAAmBjC,EAASkC,QAAO,SAACC,GACtC,OAAOA,EAAQzC,KACV0C,cACAC,SAASd,EAAYa,kBAG9B,OAAKpC,EAASsC,OAKN,yBAAK1C,UAAU,MACX,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWY,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpB,SAAUiC,MARzB,8C,GA5BDM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ef186ddd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Card({ id, name, email }) {\r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='monsterPhoto' src={`https://robohash.org/${id}?200x200&set=set2`}></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nfunction CardList({ monsters }) {\r\n  const cardsArray = monsters.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={monsters[i].id}\r\n        id={monsters[i].id}\r\n        name={monsters[i].name}\r\n        email={monsters[i].email}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <div>{cardsArray}</div>;\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nfunction SearchBox( {searchField, searchChange} ) {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className= 'pa3 ba b--green bg-lightest-blue' \r\n                type=\"search\" \r\n                placeholder=\"Search Monster\"\r\n                onChange={searchChange}>\r\n            </input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nfunction Scroll(props) {\r\n    return(\r\n        <div style = {{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\"\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            monsters: [],\r\n            searchfield: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then((response) => response.json())\r\n            .then(users => this.setState({ monsters: users }));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value });\r\n    };\r\n\r\n    render() {\r\n        const { monsters, searchfield } = this.state;\r\n        const filteredMonsters = monsters.filter((monster) => {\r\n            return monster.name\r\n                .toLowerCase()\r\n                .includes(searchfield.toLowerCase());\r\n        });\r\n\r\n        if (!monsters.length){\r\n            return <h1>Loading...</h1>\r\n        }\r\n        else{\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">Monster Grid</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}></SearchBox>\r\n                    <Scroll>\r\n                        <CardList monsters={filteredMonsters}></CardList>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }        \r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App></App>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}